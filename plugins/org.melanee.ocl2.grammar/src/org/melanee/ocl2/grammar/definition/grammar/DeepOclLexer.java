// Generated from grammar/DeepOcl.g4 by ANTLR 4.5.3
package org.melanee.ocl2.grammar.definition.grammar;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class DeepOclLexer extends Lexer {
	static { RuntimeMetaData.checkVersion("4.5.3", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, T__37=38, 
		T__38=39, T__39=40, T__40=41, T__41=42, T__42=43, T__43=44, T__44=45, 
		T__45=46, T__46=47, T__47=48, T__48=49, T__49=50, T__50=51, T__51=52, 
		T__52=53, T__53=54, T__54=55, T__55=56, T__56=57, T__57=58, T__58=59, 
		T__59=60, T__60=61, T__61=62, T__62=63, CONTEXT=64, UnaryOperatorCS=65, 
		InvalIDLiteralExpCS=66, NumberLiteralExpCS=67, INT=68, BooleanLiteralExpCS=69, 
		NullLiteralExpCS=70, ID=71, WS=72, ONESPACE=73, STRING=74, UnterminatedStringLiteral=75, 
		COMMENT=76;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] ruleNames = {
		"T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", "T__7", "T__8", 
		"T__9", "T__10", "T__11", "T__12", "T__13", "T__14", "T__15", "T__16", 
		"T__17", "T__18", "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
		"T__25", "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", "T__32", 
		"T__33", "T__34", "T__35", "T__36", "T__37", "T__38", "T__39", "T__40", 
		"T__41", "T__42", "T__43", "T__44", "T__45", "T__46", "T__47", "T__48", 
		"T__49", "T__50", "T__51", "T__52", "T__53", "T__54", "T__55", "T__56", 
		"T__57", "T__58", "T__59", "T__60", "T__61", "T__62", "CONTEXT", "UnaryOperatorCS", 
		"InvalIDLiteralExpCS", "NumberLiteralExpCS", "DIGIT", "INT", "BooleanLiteralExpCS", 
		"NullLiteralExpCS", "ID", "WS", "ONESPACE", "STRING", "UnterminatedStringLiteral", 
		"COMMENT"
	};

	private static final String[] _LITERAL_NAMES = {
		null, "':'", "'::'", "'('", "','", "')'", "'_'", "'body'", "'post'", "'pre'", 
		"'def'", "'='", "'Tuple'", "'<'", "'>'", "'Collection'", "'Bag'", "'OrderedSet'", 
		"'Sequence'", "'Set'", "'Boolean'", "'Integer'", "'Real'", "'String'", 
		"'ID'", "'UnlimitedNatural'", "'OclAny'", "'OclInvalID'", "'OclVoID'", 
		"'/'", "'*'", "'+'", "'-'", "'<='", "'>='", "'<>'", "'^'", "'and'", "'or'", 
		"'xor'", "'implies'", "'|'", "'.'", "'->'", "'if'", "'then'", "'else'", 
		"'endif'", "'let'", "'in'", "'{'", "'}'", "'..'", "'self'", "'@'", "'\"'", 
		"';'", "'['", "']'", "'$'", "'#'", "'inv'", "'derive'", "'init'", "'context'", 
		null, "'invalid'", null, null, null, "'null'", null, null, "' '"
	};
	private static final String[] _SYMBOLIC_NAMES = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, "CONTEXT", "UnaryOperatorCS", "InvalIDLiteralExpCS", 
		"NumberLiteralExpCS", "INT", "BooleanLiteralExpCS", "NullLiteralExpCS", 
		"ID", "WS", "ONESPACE", "STRING", "UnterminatedStringLiteral", "COMMENT"
	};
	public static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);

	/**
	 * @deprecated Use {@link #VOCABULARY} instead.
	 */
	@Deprecated
	public static final String[] tokenNames;
	static {
		tokenNames = new String[_SYMBOLIC_NAMES.length];
		for (int i = 0; i < tokenNames.length; i++) {
			tokenNames[i] = VOCABULARY.getLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = VOCABULARY.getSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}
	}

	@Override
	@Deprecated
	public String[] getTokenNames() {
		return tokenNames;
	}

	@Override

	public Vocabulary getVocabulary() {
		return VOCABULARY;
	}


	public DeepOclLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "DeepOcl.g4"; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2N\u020f\b\1\4\2\t"+
		"\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13"+
		"\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31\t\31"+
		"\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t \4!"+
		"\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4"+
		",\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t"+
		"\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t;\4<\t<\4=\t="+
		"\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I"+
		"\tI\4J\tJ\4K\tK\4L\tL\4M\tM\4N\tN\3\2\3\2\3\3\3\3\3\3\3\4\3\4\3\5\3\5"+
		"\3\6\3\6\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3"+
		"\n\3\13\3\13\3\13\3\13\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\17"+
		"\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\21\3\21"+
		"\3\21\3\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\23"+
		"\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\24\3\25\3\25"+
		"\3\25\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26"+
		"\3\27\3\27\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31"+
		"\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\32"+
		"\3\32\3\32\3\32\3\32\3\33\3\33\3\33\3\33\3\33\3\33\3\33\3\34\3\34\3\34"+
		"\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35"+
		"\3\35\3\35\3\36\3\36\3\37\3\37\3 \3 \3!\3!\3\"\3\"\3\"\3#\3#\3#\3$\3$"+
		"\3$\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3(\3(\3(\3(\3)\3)\3)\3)\3)\3)\3)\3)"+
		"\3*\3*\3+\3+\3,\3,\3,\3-\3-\3-\3.\3.\3.\3.\3.\3/\3/\3/\3/\3/\3\60\3\60"+
		"\3\60\3\60\3\60\3\60\3\61\3\61\3\61\3\61\3\62\3\62\3\62\3\63\3\63\3\64"+
		"\3\64\3\65\3\65\3\65\3\66\3\66\3\66\3\66\3\66\3\67\3\67\38\38\39\39\3"+
		":\3:\3;\3;\3<\3<\3=\3=\3>\3>\3>\3>\3?\3?\3?\3?\3?\3?\3?\3@\3@\3@\3@\3"+
		"@\3A\3A\3A\3A\3A\3A\3A\3A\3B\3B\3B\3B\5B\u01b7\nB\3C\3C\3C\3C\3C\3C\3"+
		"C\3C\3D\3D\3D\5D\u01c4\nD\3D\3D\5D\u01c8\nD\3D\5D\u01cb\nD\3E\3E\3F\6"+
		"F\u01d0\nF\rF\16F\u01d1\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u01dd\nG\3H\3H\3"+
		"H\3H\3H\3I\3I\7I\u01e6\nI\fI\16I\u01e9\13I\3J\6J\u01ec\nJ\rJ\16J\u01ed"+
		"\3J\3J\3K\3K\3L\3L\3L\3M\3M\3M\3M\3M\5M\u01fc\nM\7M\u01fe\nM\fM\16M\u0201"+
		"\13M\3N\3N\3N\3N\7N\u0207\nN\fN\16N\u020a\13N\3N\3N\3N\3N\3\u0208\2O\3"+
		"\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37"+
		"\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37="+
		" ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67m8o9"+
		"q:s;u<w=y>{?}@\177A\u0081B\u0083C\u0085D\u0087E\u0089\2\u008bF\u008dG"+
		"\u008fH\u0091I\u0093J\u0095K\u0097L\u0099M\u009bN\3\2\t\4\2GGgg\4\2--"+
		"//\3\2\62;\4\2C\\c|\5\2\62;C\\c|\5\2\13\f\17\17\"\"\6\2\f\f\17\17$$^^"+
		"\u0219\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2"+
		"\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3"+
		"\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2"+
		"\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2"+
		"/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2"+
		"\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2"+
		"G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3"+
		"\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2"+
		"\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\2"+
		"m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2\2\2y\3"+
		"\2\2\2\2{\3\2\2\2\2}\3\2\2\2\2\177\3\2\2\2\2\u0081\3\2\2\2\2\u0083\3\2"+
		"\2\2\2\u0085\3\2\2\2\2\u0087\3\2\2\2\2\u008b\3\2\2\2\2\u008d\3\2\2\2\2"+
		"\u008f\3\2\2\2\2\u0091\3\2\2\2\2\u0093\3\2\2\2\2\u0095\3\2\2\2\2\u0097"+
		"\3\2\2\2\2\u0099\3\2\2\2\2\u009b\3\2\2\2\3\u009d\3\2\2\2\5\u009f\3\2\2"+
		"\2\7\u00a2\3\2\2\2\t\u00a4\3\2\2\2\13\u00a6\3\2\2\2\r\u00a8\3\2\2\2\17"+
		"\u00aa\3\2\2\2\21\u00af\3\2\2\2\23\u00b4\3\2\2\2\25\u00b8\3\2\2\2\27\u00bc"+
		"\3\2\2\2\31\u00be\3\2\2\2\33\u00c4\3\2\2\2\35\u00c6\3\2\2\2\37\u00c8\3"+
		"\2\2\2!\u00d3\3\2\2\2#\u00d7\3\2\2\2%\u00e2\3\2\2\2\'\u00eb\3\2\2\2)\u00ef"+
		"\3\2\2\2+\u00f7\3\2\2\2-\u00ff\3\2\2\2/\u0104\3\2\2\2\61\u010b\3\2\2\2"+
		"\63\u010e\3\2\2\2\65\u011f\3\2\2\2\67\u0126\3\2\2\29\u0131\3\2\2\2;\u0139"+
		"\3\2\2\2=\u013b\3\2\2\2?\u013d\3\2\2\2A\u013f\3\2\2\2C\u0141\3\2\2\2E"+
		"\u0144\3\2\2\2G\u0147\3\2\2\2I\u014a\3\2\2\2K\u014c\3\2\2\2M\u0150\3\2"+
		"\2\2O\u0153\3\2\2\2Q\u0157\3\2\2\2S\u015f\3\2\2\2U\u0161\3\2\2\2W\u0163"+
		"\3\2\2\2Y\u0166\3\2\2\2[\u0169\3\2\2\2]\u016e\3\2\2\2_\u0173\3\2\2\2a"+
		"\u0179\3\2\2\2c\u017d\3\2\2\2e\u0180\3\2\2\2g\u0182\3\2\2\2i\u0184\3\2"+
		"\2\2k\u0187\3\2\2\2m\u018c\3\2\2\2o\u018e\3\2\2\2q\u0190\3\2\2\2s\u0192"+
		"\3\2\2\2u\u0194\3\2\2\2w\u0196\3\2\2\2y\u0198\3\2\2\2{\u019a\3\2\2\2}"+
		"\u019e\3\2\2\2\177\u01a5\3\2\2\2\u0081\u01aa\3\2\2\2\u0083\u01b6\3\2\2"+
		"\2\u0085\u01b8\3\2\2\2\u0087\u01c0\3\2\2\2\u0089\u01cc\3\2\2\2\u008b\u01cf"+
		"\3\2\2\2\u008d\u01dc\3\2\2\2\u008f\u01de\3\2\2\2\u0091\u01e3\3\2\2\2\u0093"+
		"\u01eb\3\2\2\2\u0095\u01f1\3\2\2\2\u0097\u01f3\3\2\2\2\u0099\u01f6\3\2"+
		"\2\2\u009b\u0202\3\2\2\2\u009d\u009e\7<\2\2\u009e\4\3\2\2\2\u009f\u00a0"+
		"\7<\2\2\u00a0\u00a1\7<\2\2\u00a1\6\3\2\2\2\u00a2\u00a3\7*\2\2\u00a3\b"+
		"\3\2\2\2\u00a4\u00a5\7.\2\2\u00a5\n\3\2\2\2\u00a6\u00a7\7+\2\2\u00a7\f"+
		"\3\2\2\2\u00a8\u00a9\7a\2\2\u00a9\16\3\2\2\2\u00aa\u00ab\7d\2\2\u00ab"+
		"\u00ac\7q\2\2\u00ac\u00ad\7f\2\2\u00ad\u00ae\7{\2\2\u00ae\20\3\2\2\2\u00af"+
		"\u00b0\7r\2\2\u00b0\u00b1\7q\2\2\u00b1\u00b2\7u\2\2\u00b2\u00b3\7v\2\2"+
		"\u00b3\22\3\2\2\2\u00b4\u00b5\7r\2\2\u00b5\u00b6\7t\2\2\u00b6\u00b7\7"+
		"g\2\2\u00b7\24\3\2\2\2\u00b8\u00b9\7f\2\2\u00b9\u00ba\7g\2\2\u00ba\u00bb"+
		"\7h\2\2\u00bb\26\3\2\2\2\u00bc\u00bd\7?\2\2\u00bd\30\3\2\2\2\u00be\u00bf"+
		"\7V\2\2\u00bf\u00c0\7w\2\2\u00c0\u00c1\7r\2\2\u00c1\u00c2\7n\2\2\u00c2"+
		"\u00c3\7g\2\2\u00c3\32\3\2\2\2\u00c4\u00c5\7>\2\2\u00c5\34\3\2\2\2\u00c6"+
		"\u00c7\7@\2\2\u00c7\36\3\2\2\2\u00c8\u00c9\7E\2\2\u00c9\u00ca\7q\2\2\u00ca"+
		"\u00cb\7n\2\2\u00cb\u00cc\7n\2\2\u00cc\u00cd\7g\2\2\u00cd\u00ce\7e\2\2"+
		"\u00ce\u00cf\7v\2\2\u00cf\u00d0\7k\2\2\u00d0\u00d1\7q\2\2\u00d1\u00d2"+
		"\7p\2\2\u00d2 \3\2\2\2\u00d3\u00d4\7D\2\2\u00d4\u00d5\7c\2\2\u00d5\u00d6"+
		"\7i\2\2\u00d6\"\3\2\2\2\u00d7\u00d8\7Q\2\2\u00d8\u00d9\7t\2\2\u00d9\u00da"+
		"\7f\2\2\u00da\u00db\7g\2\2\u00db\u00dc\7t\2\2\u00dc\u00dd\7g\2\2\u00dd"+
		"\u00de\7f\2\2\u00de\u00df\7U\2\2\u00df\u00e0\7g\2\2\u00e0\u00e1\7v\2\2"+
		"\u00e1$\3\2\2\2\u00e2\u00e3\7U\2\2\u00e3\u00e4\7g\2\2\u00e4\u00e5\7s\2"+
		"\2\u00e5\u00e6\7w\2\2\u00e6\u00e7\7g\2\2\u00e7\u00e8\7p\2\2\u00e8\u00e9"+
		"\7e\2\2\u00e9\u00ea\7g\2\2\u00ea&\3\2\2\2\u00eb\u00ec\7U\2\2\u00ec\u00ed"+
		"\7g\2\2\u00ed\u00ee\7v\2\2\u00ee(\3\2\2\2\u00ef\u00f0\7D\2\2\u00f0\u00f1"+
		"\7q\2\2\u00f1\u00f2\7q\2\2\u00f2\u00f3\7n\2\2\u00f3\u00f4\7g\2\2\u00f4"+
		"\u00f5\7c\2\2\u00f5\u00f6\7p\2\2\u00f6*\3\2\2\2\u00f7\u00f8\7K\2\2\u00f8"+
		"\u00f9\7p\2\2\u00f9\u00fa\7v\2\2\u00fa\u00fb\7g\2\2\u00fb\u00fc\7i\2\2"+
		"\u00fc\u00fd\7g\2\2\u00fd\u00fe\7t\2\2\u00fe,\3\2\2\2\u00ff\u0100\7T\2"+
		"\2\u0100\u0101\7g\2\2\u0101\u0102\7c\2\2\u0102\u0103\7n\2\2\u0103.\3\2"+
		"\2\2\u0104\u0105\7U\2\2\u0105\u0106\7v\2\2\u0106\u0107\7t\2\2\u0107\u0108"+
		"\7k\2\2\u0108\u0109\7p\2\2\u0109\u010a\7i\2\2\u010a\60\3\2\2\2\u010b\u010c"+
		"\7K\2\2\u010c\u010d\7F\2\2\u010d\62\3\2\2\2\u010e\u010f\7W\2\2\u010f\u0110"+
		"\7p\2\2\u0110\u0111\7n\2\2\u0111\u0112\7k\2\2\u0112\u0113\7o\2\2\u0113"+
		"\u0114\7k\2\2\u0114\u0115\7v\2\2\u0115\u0116\7g\2\2\u0116\u0117\7f\2\2"+
		"\u0117\u0118\7P\2\2\u0118\u0119\7c\2\2\u0119\u011a\7v\2\2\u011a\u011b"+
		"\7w\2\2\u011b\u011c\7t\2\2\u011c\u011d\7c\2\2\u011d\u011e\7n\2\2\u011e"+
		"\64\3\2\2\2\u011f\u0120\7Q\2\2\u0120\u0121\7e\2\2\u0121\u0122\7n\2\2\u0122"+
		"\u0123\7C\2\2\u0123\u0124\7p\2\2\u0124\u0125\7{\2\2\u0125\66\3\2\2\2\u0126"+
		"\u0127\7Q\2\2\u0127\u0128\7e\2\2\u0128\u0129\7n\2\2\u0129\u012a\7K\2\2"+
		"\u012a\u012b\7p\2\2\u012b\u012c\7x\2\2\u012c\u012d\7c\2\2\u012d\u012e"+
		"\7n\2\2\u012e\u012f\7K\2\2\u012f\u0130\7F\2\2\u01308\3\2\2\2\u0131\u0132"+
		"\7Q\2\2\u0132\u0133\7e\2\2\u0133\u0134\7n\2\2\u0134\u0135\7X\2\2\u0135"+
		"\u0136\7q\2\2\u0136\u0137\7K\2\2\u0137\u0138\7F\2\2\u0138:\3\2\2\2\u0139"+
		"\u013a\7\61\2\2\u013a<\3\2\2\2\u013b\u013c\7,\2\2\u013c>\3\2\2\2\u013d"+
		"\u013e\7-\2\2\u013e@\3\2\2\2\u013f\u0140\7/\2\2\u0140B\3\2\2\2\u0141\u0142"+
		"\7>\2\2\u0142\u0143\7?\2\2\u0143D\3\2\2\2\u0144\u0145\7@\2\2\u0145\u0146"+
		"\7?\2\2\u0146F\3\2\2\2\u0147\u0148\7>\2\2\u0148\u0149\7@\2\2\u0149H\3"+
		"\2\2\2\u014a\u014b\7`\2\2\u014bJ\3\2\2\2\u014c\u014d\7c\2\2\u014d\u014e"+
		"\7p\2\2\u014e\u014f\7f\2\2\u014fL\3\2\2\2\u0150\u0151\7q\2\2\u0151\u0152"+
		"\7t\2\2\u0152N\3\2\2\2\u0153\u0154\7z\2\2\u0154\u0155\7q\2\2\u0155\u0156"+
		"\7t\2\2\u0156P\3\2\2\2\u0157\u0158\7k\2\2\u0158\u0159\7o\2\2\u0159\u015a"+
		"\7r\2\2\u015a\u015b\7n\2\2\u015b\u015c\7k\2\2\u015c\u015d\7g\2\2\u015d"+
		"\u015e\7u\2\2\u015eR\3\2\2\2\u015f\u0160\7~\2\2\u0160T\3\2\2\2\u0161\u0162"+
		"\7\60\2\2\u0162V\3\2\2\2\u0163\u0164\7/\2\2\u0164\u0165\7@\2\2\u0165X"+
		"\3\2\2\2\u0166\u0167\7k\2\2\u0167\u0168\7h\2\2\u0168Z\3\2\2\2\u0169\u016a"+
		"\7v\2\2\u016a\u016b\7j\2\2\u016b\u016c\7g\2\2\u016c\u016d\7p\2\2\u016d"+
		"\\\3\2\2\2\u016e\u016f\7g\2\2\u016f\u0170\7n\2\2\u0170\u0171\7u\2\2\u0171"+
		"\u0172\7g\2\2\u0172^\3\2\2\2\u0173\u0174\7g\2\2\u0174\u0175\7p\2\2\u0175"+
		"\u0176\7f\2\2\u0176\u0177\7k\2\2\u0177\u0178\7h\2\2\u0178`\3\2\2\2\u0179"+
		"\u017a\7n\2\2\u017a\u017b\7g\2\2\u017b\u017c\7v\2\2\u017cb\3\2\2\2\u017d"+
		"\u017e\7k\2\2\u017e\u017f\7p\2\2\u017fd\3\2\2\2\u0180\u0181\7}\2\2\u0181"+
		"f\3\2\2\2\u0182\u0183\7\177\2\2\u0183h\3\2\2\2\u0184\u0185\7\60\2\2\u0185"+
		"\u0186\7\60\2\2\u0186j\3\2\2\2\u0187\u0188\7u\2\2\u0188\u0189\7g\2\2\u0189"+
		"\u018a\7n\2\2\u018a\u018b\7h\2\2\u018bl\3\2\2\2\u018c\u018d\7B\2\2\u018d"+
		"n\3\2\2\2\u018e\u018f\7$\2\2\u018fp\3\2\2\2\u0190\u0191\7=\2\2\u0191r"+
		"\3\2\2\2\u0192\u0193\7]\2\2\u0193t\3\2\2\2\u0194\u0195\7_\2\2\u0195v\3"+
		"\2\2\2\u0196\u0197\7&\2\2\u0197x\3\2\2\2\u0198\u0199\7%\2\2\u0199z\3\2"+
		"\2\2\u019a\u019b\7k\2\2\u019b\u019c\7p\2\2\u019c\u019d\7x\2\2\u019d|\3"+
		"\2\2\2\u019e\u019f\7f\2\2\u019f\u01a0\7g\2\2\u01a0\u01a1\7t\2\2\u01a1"+
		"\u01a2\7k\2\2\u01a2\u01a3\7x\2\2\u01a3\u01a4\7g\2\2\u01a4~\3\2\2\2\u01a5"+
		"\u01a6\7k\2\2\u01a6\u01a7\7p\2\2\u01a7\u01a8\7k\2\2\u01a8\u01a9\7v\2\2"+
		"\u01a9\u0080\3\2\2\2\u01aa\u01ab\7e\2\2\u01ab\u01ac\7q\2\2\u01ac\u01ad"+
		"\7p\2\2\u01ad\u01ae\7v\2\2\u01ae\u01af\7g\2\2\u01af\u01b0\7z\2\2\u01b0"+
		"\u01b1\7v\2\2\u01b1\u0082\3\2\2\2\u01b2\u01b7\7/\2\2\u01b3\u01b4\7p\2"+
		"\2\u01b4\u01b5\7q\2\2\u01b5\u01b7\7v\2\2\u01b6\u01b2\3\2\2\2\u01b6\u01b3"+
		"\3\2\2\2\u01b7\u0084\3\2\2\2\u01b8\u01b9\7k\2\2\u01b9\u01ba\7p\2\2\u01ba"+
		"\u01bb\7x\2\2\u01bb\u01bc\7c\2\2\u01bc\u01bd\7n\2\2\u01bd\u01be\7k\2\2"+
		"\u01be\u01bf\7f\2\2\u01bf\u0086\3\2\2\2\u01c0\u01c3\5\u008bF\2\u01c1\u01c2"+
		"\7\60\2\2\u01c2\u01c4\5\u008bF\2\u01c3\u01c1\3\2\2\2\u01c3\u01c4\3\2\2"+
		"\2\u01c4\u01ca\3\2\2\2\u01c5\u01c7\t\2\2\2\u01c6\u01c8\t\3\2\2\u01c7\u01c6"+
		"\3\2\2\2\u01c7\u01c8\3\2\2\2\u01c8\u01c9\3\2\2\2\u01c9\u01cb\5\u008bF"+
		"\2\u01ca\u01c5\3\2\2\2\u01ca\u01cb\3\2\2\2\u01cb\u0088\3\2\2\2\u01cc\u01cd"+
		"\t\4\2\2\u01cd\u008a\3\2\2\2\u01ce\u01d0\5\u0089E\2\u01cf\u01ce\3\2\2"+
		"\2\u01d0\u01d1\3\2\2\2\u01d1\u01cf\3\2\2\2\u01d1\u01d2\3\2\2\2\u01d2\u008c"+
		"\3\2\2\2\u01d3\u01d4\7v\2\2\u01d4\u01d5\7t\2\2\u01d5\u01d6\7w\2\2\u01d6"+
		"\u01dd\7g\2\2\u01d7\u01d8\7h\2\2\u01d8\u01d9\7c\2\2\u01d9\u01da\7n\2\2"+
		"\u01da\u01db\7u\2\2\u01db\u01dd\7g\2\2\u01dc\u01d3\3\2\2\2\u01dc\u01d7"+
		"\3\2\2\2\u01dd\u008e\3\2\2\2\u01de\u01df\7p\2\2\u01df\u01e0\7w\2\2\u01e0"+
		"\u01e1\7n\2\2\u01e1\u01e2\7n\2\2\u01e2\u0090\3\2\2\2\u01e3\u01e7\t\5\2"+
		"\2\u01e4\u01e6\t\6\2\2\u01e5\u01e4\3\2\2\2\u01e6\u01e9\3\2\2\2\u01e7\u01e5"+
		"\3\2\2\2\u01e7\u01e8\3\2\2\2\u01e8\u0092\3\2\2\2\u01e9\u01e7\3\2\2\2\u01ea"+
		"\u01ec\t\7\2\2\u01eb\u01ea\3\2\2\2\u01ec\u01ed\3\2\2\2\u01ed\u01eb\3\2"+
		"\2\2\u01ed\u01ee\3\2\2\2\u01ee\u01ef\3\2\2\2\u01ef\u01f0\bJ\2\2\u01f0"+
		"\u0094\3\2\2\2\u01f1\u01f2\7\"\2\2\u01f2\u0096\3\2\2\2\u01f3\u01f4\5\u0099"+
		"M\2\u01f4\u01f5\7$\2\2\u01f5\u0098\3\2\2\2\u01f6\u01ff\7$\2\2\u01f7\u01fe"+
		"\n\b\2\2\u01f8\u01fb\7^\2\2\u01f9\u01fc\13\2\2\2\u01fa\u01fc\7\2\2\3\u01fb"+
		"\u01f9\3\2\2\2\u01fb\u01fa\3\2\2\2\u01fc\u01fe\3\2\2\2\u01fd\u01f7\3\2"+
		"\2\2\u01fd\u01f8\3\2\2\2\u01fe\u0201\3\2\2\2\u01ff\u01fd\3\2\2\2\u01ff"+
		"\u0200\3\2\2\2\u0200\u009a\3\2\2\2\u0201\u01ff\3\2\2\2\u0202\u0203\7/"+
		"\2\2\u0203\u0204\7/\2\2\u0204\u0208\3\2\2\2\u0205\u0207\13\2\2\2\u0206"+
		"\u0205\3\2\2\2\u0207\u020a\3\2\2\2\u0208\u0209\3\2\2\2\u0208\u0206\3\2"+
		"\2\2\u0209\u020b\3\2\2\2\u020a\u0208\3\2\2\2\u020b\u020c\7\f\2\2\u020c"+
		"\u020d\3\2\2\2\u020d\u020e\bN\2\2\u020e\u009c\3\2\2\2\17\2\u01b6\u01c3"+
		"\u01c7\u01ca\u01d1\u01dc\u01e7\u01ed\u01fb\u01fd\u01ff\u0208\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}